
recieve string on uSart and display on lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008f8  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  000010c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c96  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000420  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b7  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00002a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c7  00000000  00000000  00002f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 04 	call	0x810	; 0x810 <main>
  8a:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VsetPINDIR>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_VsetPINDIR(char portname, char pinnumber, char dir) // (v) before set stands for that this function return VOID 
{
	switch (portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_VsetPINDIR+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_VsetPINDIR+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_VsetPINDIR+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_VsetPINDIR+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_VsetPINDIR+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_VsetPINDIR+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_VsetPINDIR+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_VsetPINDIR+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_VsetPINDIR+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_VsetPINDIR+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_VsetPINDIR+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_VsetPINDIR+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_VsetPINDIR+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_VsetPINDIR+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_VsetPINDIR+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_VsetPINDIR+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_VsetPINDIR+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_VsetPINDIR+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_VsetPINDIR+0xe8>
	{
	case 'A':
	case'a':
	  if (dir==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_VsetPINDIR+0x58>
	    SET_BIT(DDRA,pinnumber); // from std_macros header file
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_VsetPINDIR+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_VsetPINDIR+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
	  else                       //Set the direction of the given pin in port A as output
	    CLR_BIT(DDRA,pinnumber); //Set the direction of the given pin in port A as input
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_VsetPINDIR+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_VsetPINDIR+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
	break;
	
	
	case 'B':
	case'b':
	   if (dir==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_VsetPINDIR+0x92>
	      SET_BIT(DDRB,pinnumber); 
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_VsetPINDIR+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_VsetPINDIR+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
	   else
	      CLR_BIT(DDRB,pinnumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_VsetPINDIR+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_VsetPINDIR+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
	break;
	
	case 'C':
	case'c':
	   if (dir==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_VsetPINDIR+0xcc>
	      SET_BIT(DDRC,pinnumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_VsetPINDIR+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_VsetPINDIR+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
	   else
	      CLR_BIT(DDRC,pinnumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_VsetPINDIR+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_VsetPINDIR+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
	break;
	
	case 'D':
	case'd':
	  if (dir==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_VsetPINDIR+0x106>
	     SET_BIT(DDRB,pinnumber);
 17e:	27 b3       	in	r18, 0x17	; 23
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_VsetPINDIR+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_VsetPINDIR+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	67 bb       	out	0x17, r22	; 23
 196:	08 95       	ret
	  else
	     CLR_BIT(DDRB,pinnumber);
 198:	27 b3       	in	r18, 0x17	; 23
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_VsetPINDIR+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_VsetPINDIR+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	67 bb       	out	0x17, r22	; 23
 1b2:	08 95       	ret

000001b4 <DIO_vwrite>:
	
}

 void DIO_vwrite (char portname, char pinnumber, char val )
{
	switch (portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vwrite+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vwrite+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vwrite+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vwrite+0xe8>
	{ case 'A':
	  case'a':
	   if (val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite+0x58>
	      SET_BIT(PORTA,pinnumber); // from std_macros header file
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
	   else                       
	      CLR_BIT(PORTA,pinnumber); 
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
	break;
	
	
	case 'B':
	case'b':
	  if (val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite+0x92>
	     SET_BIT(PORTB,pinnumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
	  else
	     CLR_BIT(PORTB,pinnumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
	break;
	
	case 'C':
	case'c':
	  if (val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite+0xcc>
	     SET_BIT(PORTC,pinnumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
	  else
	    CLR_BIT(PORTC,pinnumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
	break;
	
	case 'D':
	case'd':
	   if (val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite+0x106>
	     SET_BIT(PORTD,pinnumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
	    else
	      CLR_BIT(PORTD,pinnumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_vtoggle>:
	}	
}

void DIO_vtoggle (char portname, char pinnumber)
 {
	 switch (portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vtoggle+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vtoggle+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vtoggle+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vtoggle+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vtoggle+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vtoggle+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vtoggle+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vtoggle+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vtoggle+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vtoggle+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vtoggle+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vtoggle+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vtoggle+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vtoggle+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vtoggle+0x80>
	  { case 'a':
	   case'A':
	    TOG_BIT(PORTA, pinnumber);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vtoggle+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vtoggle+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		
	  case 'B':
	  case'b':
	    TOG_BIT(PORTB, pinnumber);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vtoggle+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vtoggle+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
	    break;
 33a:	08 95       	ret
	  
	  case'C':
	  case'c':
	    TOG_BIT(PORTC, pinnumber);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vtoggle+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vtoggle+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
	    break;
 354:	08 95       	ret
		
		
	  case'D':
	  case'd':
	     TOG_BIT(PORTD, pinnumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vtoggle+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vtoggle+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_u8read>:
 }
 
 unsigned char DIO_u8read(char portname, char pinnumber)
 { unsigned char return_value=0;
	 
	 switch (portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_u8read+0x6>
 374:	4e c0       	rjmp	.+156    	; 0x412 <DIO_u8read+0xa2>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_u8read+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	31 f1       	breq	.+76     	; 0x3ca <DIO_u8read+0x5a>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	b0 f5       	brcc	.+108    	; 0x3ee <DIO_u8read+0x7e>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_u8read+0x18>
 386:	57 c0       	rjmp	.+174    	; 0x436 <DIO_u8read+0xc6>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_u8read+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f1 f0       	breq	.+60     	; 0x3ca <DIO_u8read+0x5a>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_u8read+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_u8read+0x28>
 396:	4f c0       	rjmp	.+158    	; 0x436 <DIO_u8read+0xc6>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_u8read+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	41 f1       	breq	.+80     	; 0x3ee <DIO_u8read+0x7e>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8read+0x34>
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <DIO_u8read+0xc6>
 3a4:	36 c0       	rjmp	.+108    	; 0x412 <DIO_u8read+0xa2>
	 {  
		 
		 case 'A':
		 case'a':
		  
		  return_value  = READ_BIT(PINA, pinnumber);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8read+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8read+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8read+0x54>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8read+0x50>
		  break;
 3c8:	08 95       	ret
		
		 case 'B':
		 case'b':
		 
		    return_value = READ_BIT(PINB, pinnumber);
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8read+0x68>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8read+0x64>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8read+0x78>
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8read+0x74>
			break;
 3ec:	08 95       	ret
			
		 case 'C':
		 case'c':
		    return_value= READ_BIT(PINC, pinnumber);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	06 2e       	mov	r0, r22
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8read+0x8c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8read+0x88>
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	82 23       	and	r24, r18
 404:	93 23       	and	r25, r19
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8read+0x9c>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8read+0x98>
			break;
 410:	08 95       	ret
			
		 case 'D':
		 case'd':
		    return_value= READ_BIT(PIND, pinnumber);
 412:	20 b3       	in	r18, 0x10	; 16
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8read+0xb0>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8read+0xac>
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8read+0xc0>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8read+0xbc>
			break;
 434:	08 95       	ret
	  
		
 }
 
 unsigned char DIO_u8read(char portname, char pinnumber)
 { unsigned char return_value=0;
 436:	80 e0       	ldi	r24, 0x00	; 0
		 
		 
		 
	 }
	 return return_value;
 }
 438:	08 95       	ret

0000043a <DIO_vset_PORT_DIR>:
 
 
 void DIO_vset_PORT_DIR(char portname,char dir)
 {    switch (portname)
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_vset_PORT_DIR+0x3a>
 43e:	85 34       	cpi	r24, 0x45	; 69
 440:	38 f4       	brcc	.+14     	; 0x450 <DIO_vset_PORT_DIR+0x16>
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	99 f0       	breq	.+38     	; 0x46c <DIO_vset_PORT_DIR+0x32>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	98 f4       	brcc	.+38     	; 0x470 <DIO_vset_PORT_DIR+0x36>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_vset_PORT_DIR+0x3c>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_vset_PORT_DIR+0x2e>
 450:	82 36       	cpi	r24, 0x62	; 98
 452:	61 f0       	breq	.+24     	; 0x46c <DIO_vset_PORT_DIR+0x32>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_vset_PORT_DIR+0x24>
 458:	81 36       	cpi	r24, 0x61	; 97
 45a:	69 f4       	brne	.+26     	; 0x476 <DIO_vset_PORT_DIR+0x3c>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_vset_PORT_DIR+0x2e>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_vset_PORT_DIR+0x36>
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	41 f4       	brne	.+16     	; 0x476 <DIO_vset_PORT_DIR+0x3c>
 466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_vset_PORT_DIR+0x3a>
     {    case 'a':
	      case'A':
	           DDRA= dir;
 468:	6a bb       	out	0x1a, r22	; 26
	       break;
 46a:	08 95       	ret
	 
	       case 'B':
	       case'b':
	            DDRB= dir;
 46c:	67 bb       	out	0x17, r22	; 23
	       break;
 46e:	08 95       	ret
	 
	       case'C':
	       case'c':
	            DDRC= dir;
 470:	64 bb       	out	0x14, r22	; 20
	       break;
 472:	08 95       	ret
	 
	 
	       case'D':
	       case'd':
	            DDRD= dir;
 474:	61 bb       	out	0x11, r22	; 17
 476:	08 95       	ret

00000478 <DIO_write_port>:
	       break;
	 }		   
 }
 void DIO_write_port(unsigned char portname,unsigned char portvalue)
 {
	 switch(portname)
 478:	82 34       	cpi	r24, 0x42	; 66
 47a:	61 f0       	breq	.+24     	; 0x494 <DIO_write_port+0x1c>
 47c:	83 34       	cpi	r24, 0x43	; 67
 47e:	18 f4       	brcc	.+6      	; 0x486 <DIO_write_port+0xe>
 480:	81 34       	cpi	r24, 0x41	; 65
 482:	69 f4       	brne	.+26     	; 0x49e <DIO_write_port+0x26>
 484:	05 c0       	rjmp	.+10     	; 0x490 <DIO_write_port+0x18>
 486:	83 34       	cpi	r24, 0x43	; 67
 488:	39 f0       	breq	.+14     	; 0x498 <DIO_write_port+0x20>
 48a:	84 34       	cpi	r24, 0x44	; 68
 48c:	41 f4       	brne	.+16     	; 0x49e <DIO_write_port+0x26>
 48e:	06 c0       	rjmp	.+12     	; 0x49c <DIO_write_port+0x24>
	 {
		 case 'A' :
		 PORTA=portvalue; //Write the given value to the port A
 490:	6b bb       	out	0x1b, r22	; 27
		 break ;
 492:	08 95       	ret
		 case 'B':
		 PORTB=portvalue; //Write the given value to the port B
 494:	68 bb       	out	0x18, r22	; 24
		 break ;
 496:	08 95       	ret
		 case 'C' :
		 PORTC=portvalue; //Write the given value to the port C
 498:	65 bb       	out	0x15, r22	; 21
		 break ;
 49a:	08 95       	ret
		 case 'D':
		 PORTD=portvalue; //Write the given value to the port D
 49c:	62 bb       	out	0x12, r22	; 18
 49e:	08 95       	ret

000004a0 <DIO_read_port>:
 }

 unsigned char DIO_read_port(unsigned char portname)
 {
	 unsigned char return_val=0;
	 switch(portname)
 4a0:	82 34       	cpi	r24, 0x42	; 66
 4a2:	61 f0       	breq	.+24     	; 0x4bc <DIO_read_port+0x1c>
 4a4:	83 34       	cpi	r24, 0x43	; 67
 4a6:	18 f4       	brcc	.+6      	; 0x4ae <DIO_read_port+0xe>
 4a8:	81 34       	cpi	r24, 0x41	; 65
 4aa:	71 f4       	brne	.+28     	; 0x4c8 <DIO_read_port+0x28>
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <DIO_read_port+0x18>
 4ae:	83 34       	cpi	r24, 0x43	; 67
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <DIO_read_port+0x20>
 4b2:	84 34       	cpi	r24, 0x44	; 68
 4b4:	49 f4       	brne	.+18     	; 0x4c8 <DIO_read_port+0x28>
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <DIO_read_port+0x24>
	 {
		 case 'A' :
		 return_val=PINA; // read the value of port A
 4b8:	89 b3       	in	r24, 0x19	; 25
		 break ;
 4ba:	08 95       	ret
		 case 'B':
		 return_val=PINB; // read the value of port B
 4bc:	86 b3       	in	r24, 0x16	; 22
		 break ;
 4be:	08 95       	ret
		 case 'C' :
		 return_val=PINC; // read the value of port C
 4c0:	83 b3       	in	r24, 0x13	; 19
		 break ;
 4c2:	08 95       	ret
		 case 'D':
		 return_val=PIND; // read the value of port D
 4c4:	80 b3       	in	r24, 0x10	; 16
		 break ;
 4c6:	08 95       	ret
	 }
 }

 unsigned char DIO_read_port(unsigned char portname)
 {
	 unsigned char return_val=0;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
		 break ;
		 default:
		 break ;
	 }
	 return return_val;
 }
 4ca:	08 95       	ret

000004cc <DIO_enablepullup>:
	   }
	   
   }*/
 
 void DIO_enablepullup(char portname, char pinnumber, char enable)
 {   switch(portname)
 4cc:	84 34       	cpi	r24, 0x44	; 68
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <DIO_enablepullup+0x6>
 4d0:	71 c0       	rjmp	.+226    	; 0x5b4 <DIO_enablepullup+0xe8>
 4d2:	85 34       	cpi	r24, 0x45	; 69
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <DIO_enablepullup+0x1c>
 4d6:	82 34       	cpi	r24, 0x42	; 66
 4d8:	99 f1       	breq	.+102    	; 0x540 <DIO_enablepullup+0x74>
 4da:	83 34       	cpi	r24, 0x43	; 67
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <DIO_enablepullup+0x14>
 4de:	4d c0       	rjmp	.+154    	; 0x57a <DIO_enablepullup+0xae>
 4e0:	81 34       	cpi	r24, 0x41	; 65
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <DIO_enablepullup+0x1a>
 4e4:	83 c0       	rjmp	.+262    	; 0x5ec <DIO_enablepullup+0x120>
 4e6:	0f c0       	rjmp	.+30     	; 0x506 <DIO_enablepullup+0x3a>
 4e8:	82 36       	cpi	r24, 0x62	; 98
 4ea:	51 f1       	breq	.+84     	; 0x540 <DIO_enablepullup+0x74>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	20 f4       	brcc	.+8      	; 0x4f8 <DIO_enablepullup+0x2c>
 4f0:	81 36       	cpi	r24, 0x61	; 97
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <DIO_enablepullup+0x2a>
 4f4:	7b c0       	rjmp	.+246    	; 0x5ec <DIO_enablepullup+0x120>
 4f6:	07 c0       	rjmp	.+14     	; 0x506 <DIO_enablepullup+0x3a>
 4f8:	83 36       	cpi	r24, 0x63	; 99
 4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_enablepullup+0x32>
 4fc:	3e c0       	rjmp	.+124    	; 0x57a <DIO_enablepullup+0xae>
 4fe:	84 36       	cpi	r24, 0x64	; 100
 500:	09 f0       	breq	.+2      	; 0x504 <DIO_enablepullup+0x38>
 502:	74 c0       	rjmp	.+232    	; 0x5ec <DIO_enablepullup+0x120>
 504:	57 c0       	rjmp	.+174    	; 0x5b4 <DIO_enablepullup+0xe8>
	 {
		 case'A':
		 case'a':
		    if (enable==1)
 506:	41 30       	cpi	r20, 0x01	; 1
 508:	69 f4       	brne	.+26     	; 0x524 <DIO_enablepullup+0x58>
			  SET_BIT(PORTA,pinnumber);
 50a:	4b b3       	in	r20, 0x1b	; 27
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	c9 01       	movw	r24, r18
 512:	06 2e       	mov	r0, r22
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_enablepullup+0x4e>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_enablepullup+0x4a>
 51e:	84 2b       	or	r24, r20
 520:	8b bb       	out	0x1b, r24	; 27
 522:	10 c0       	rjmp	.+32     	; 0x544 <DIO_enablepullup+0x78>
			else
			CLR_BIT(PORTA,pinnumber);
 524:	4b b3       	in	r20, 0x1b	; 27
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	c9 01       	movw	r24, r18
 52c:	06 2e       	mov	r0, r22
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_enablepullup+0x68>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_enablepullup+0x64>
 538:	80 95       	com	r24
 53a:	84 23       	and	r24, r20
 53c:	8b bb       	out	0x1b, r24	; 27
 53e:	0f c0       	rjmp	.+30     	; 0x55e <DIO_enablepullup+0x92>
			
		 case'B':
		 case'b':
		 
		     if (enable==1)
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	69 f4       	brne	.+26     	; 0x55e <DIO_enablepullup+0x92>
		     SET_BIT(PORTB,pinnumber);
 544:	28 b3       	in	r18, 0x18	; 24
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	ac 01       	movw	r20, r24
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_enablepullup+0x86>
 54e:	44 0f       	add	r20, r20
 550:	55 1f       	adc	r21, r21
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_enablepullup+0x82>
 556:	ba 01       	movw	r22, r20
 558:	62 2b       	or	r22, r18
 55a:	68 bb       	out	0x18, r22	; 24
 55c:	08 95       	ret
		     else
		     CLR_BIT(PORTB,pinnumber);
 55e:	28 b3       	in	r18, 0x18	; 24
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	ac 01       	movw	r20, r24
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_enablepullup+0xa0>
 568:	44 0f       	add	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_enablepullup+0x9c>
 570:	ba 01       	movw	r22, r20
 572:	60 95       	com	r22
 574:	62 23       	and	r22, r18
 576:	68 bb       	out	0x18, r22	; 24
 578:	08 95       	ret
			 break;
		 case'C':
		 case'c':
		     if (enable==1)
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	69 f4       	brne	.+26     	; 0x598 <DIO_enablepullup+0xcc>
		     SET_BIT(PORTC,pinnumber);
 57e:	25 b3       	in	r18, 0x15	; 21
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	ac 01       	movw	r20, r24
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_enablepullup+0xc0>
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_enablepullup+0xbc>
 590:	ba 01       	movw	r22, r20
 592:	62 2b       	or	r22, r18
 594:	65 bb       	out	0x15, r22	; 21
 596:	08 95       	ret
		     else
		     CLR_BIT(PORTC,pinnumber);
 598:	25 b3       	in	r18, 0x15	; 21
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ac 01       	movw	r20, r24
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_enablepullup+0xda>
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_enablepullup+0xd6>
 5aa:	ba 01       	movw	r22, r20
 5ac:	60 95       	com	r22
 5ae:	62 23       	and	r22, r18
 5b0:	65 bb       	out	0x15, r22	; 21
 5b2:	08 95       	ret
			 break;
		 case'D':
		 case'd':
		   if (enable==1)
 5b4:	41 30       	cpi	r20, 0x01	; 1
 5b6:	69 f4       	brne	.+26     	; 0x5d2 <DIO_enablepullup+0x106>
		   SET_BIT(PORTD,pinnumber);
 5b8:	22 b3       	in	r18, 0x12	; 18
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	ac 01       	movw	r20, r24
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_enablepullup+0xfa>
 5c2:	44 0f       	add	r20, r20
 5c4:	55 1f       	adc	r21, r21
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_enablepullup+0xf6>
 5ca:	ba 01       	movw	r22, r20
 5cc:	62 2b       	or	r22, r18
 5ce:	62 bb       	out	0x12, r22	; 18
 5d0:	08 95       	ret
		   else
		   CLR_BIT(PORTD,pinnumber);
 5d2:	22 b3       	in	r18, 0x12	; 18
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	ac 01       	movw	r20, r24
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_enablepullup+0x114>
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_enablepullup+0x110>
 5e4:	ba 01       	movw	r22, r20
 5e6:	60 95       	com	r22
 5e8:	62 23       	and	r22, r18
 5ea:	62 bb       	out	0x12, r22	; 18
 5ec:	08 95       	ret

000005ee <DIO_write_low_level>:
	 }
	 
 }
 
 void DIO_write_low_level(char portname,char val)
 {   val &=  0x0f; // 34an admn in 7ta law l user ba3tli rqm akbr mn 9 ana hsfr l high level
 5ee:	6f 70       	andi	r22, 0x0F	; 15
	 switch(portname)
 5f0:	84 34       	cpi	r24, 0x44	; 68
 5f2:	51 f1       	breq	.+84     	; 0x648 <DIO_write_low_level+0x5a>
 5f4:	85 34       	cpi	r24, 0x45	; 69
 5f6:	38 f4       	brcc	.+14     	; 0x606 <DIO_write_low_level+0x18>
 5f8:	82 34       	cpi	r24, 0x42	; 66
 5fa:	c1 f0       	breq	.+48     	; 0x62c <DIO_write_low_level+0x3e>
 5fc:	83 34       	cpi	r24, 0x43	; 67
 5fe:	e8 f4       	brcc	.+58     	; 0x63a <DIO_write_low_level+0x4c>
 600:	81 34       	cpi	r24, 0x41	; 65
 602:	41 f5       	brne	.+80     	; 0x654 <DIO_write_low_level+0x66>
 604:	0c c0       	rjmp	.+24     	; 0x61e <DIO_write_low_level+0x30>
 606:	82 36       	cpi	r24, 0x62	; 98
 608:	89 f0       	breq	.+34     	; 0x62c <DIO_write_low_level+0x3e>
 60a:	83 36       	cpi	r24, 0x63	; 99
 60c:	18 f4       	brcc	.+6      	; 0x614 <DIO_write_low_level+0x26>
 60e:	81 36       	cpi	r24, 0x61	; 97
 610:	09 f5       	brne	.+66     	; 0x654 <DIO_write_low_level+0x66>
 612:	05 c0       	rjmp	.+10     	; 0x61e <DIO_write_low_level+0x30>
 614:	83 36       	cpi	r24, 0x63	; 99
 616:	89 f0       	breq	.+34     	; 0x63a <DIO_write_low_level+0x4c>
 618:	84 36       	cpi	r24, 0x64	; 100
 61a:	e1 f4       	brne	.+56     	; 0x654 <DIO_write_low_level+0x66>
 61c:	15 c0       	rjmp	.+42     	; 0x648 <DIO_write_low_level+0x5a>
	 {
	 case 'a':
	 case'A':
	     PORTA&= 0xf0; // kda ana maked sure in l low level bits equal zero and high level value never changes;
 61e:	8b b3       	in	r24, 0x1b	; 27
 620:	80 7f       	andi	r24, 0xF0	; 240
 622:	8b bb       	out	0x1b, r24	; 27
	     PORTA|= val;
 624:	8b b3       	in	r24, 0x1b	; 27
 626:	68 2b       	or	r22, r24
 628:	6b bb       	out	0x1b, r22	; 27
	  break;
 62a:	08 95       	ret
	  
	 case 'b':
	 case'B':
	    PORTB&= 0xf0; 
 62c:	88 b3       	in	r24, 0x18	; 24
 62e:	80 7f       	andi	r24, 0xF0	; 240
 630:	88 bb       	out	0x18, r24	; 24
	    PORTB|= val;	
 632:	88 b3       	in	r24, 0x18	; 24
 634:	68 2b       	or	r22, r24
 636:	68 bb       	out	0x18, r22	; 24
	 break;
 638:	08 95       	ret
	 
	 case 'c':
	 case'C':
	     PORTD&= 0xf0;
 63a:	82 b3       	in	r24, 0x12	; 18
 63c:	80 7f       	andi	r24, 0xF0	; 240
 63e:	82 bb       	out	0x12, r24	; 18
	     PORTD|= val;
 640:	82 b3       	in	r24, 0x12	; 18
 642:	68 2b       	or	r22, r24
 644:	62 bb       	out	0x12, r22	; 18
	 break;
 646:	08 95       	ret
	 
	 case 'd':
	 case'D':
	    PORTD&= 0xf0;
 648:	82 b3       	in	r24, 0x12	; 18
 64a:	80 7f       	andi	r24, 0xF0	; 240
 64c:	82 bb       	out	0x12, r24	; 18
	    PORTD|= val;
 64e:	82 b3       	in	r24, 0x12	; 18
 650:	68 2b       	or	r22, r24
 652:	62 bb       	out	0x12, r22	; 18
 654:	08 95       	ret

00000656 <DIO_write_high_level>:
	 }	 
	   
 }
 
  void DIO_write_high_level(char portname,char val)
  {   val <<=4; // 34an admn in 7ta law l user ba3tli rqm akbr mn 9 ana hsfr l high level
 656:	62 95       	swap	r22
 658:	60 7f       	andi	r22, 0xF0	; 240
	  switch(portname)
 65a:	84 34       	cpi	r24, 0x44	; 68
 65c:	51 f1       	breq	.+84     	; 0x6b2 <DIO_write_high_level+0x5c>
 65e:	85 34       	cpi	r24, 0x45	; 69
 660:	38 f4       	brcc	.+14     	; 0x670 <DIO_write_high_level+0x1a>
 662:	82 34       	cpi	r24, 0x42	; 66
 664:	c1 f0       	breq	.+48     	; 0x696 <DIO_write_high_level+0x40>
 666:	83 34       	cpi	r24, 0x43	; 67
 668:	e8 f4       	brcc	.+58     	; 0x6a4 <DIO_write_high_level+0x4e>
 66a:	81 34       	cpi	r24, 0x41	; 65
 66c:	41 f5       	brne	.+80     	; 0x6be <DIO_write_high_level+0x68>
 66e:	0c c0       	rjmp	.+24     	; 0x688 <DIO_write_high_level+0x32>
 670:	82 36       	cpi	r24, 0x62	; 98
 672:	89 f0       	breq	.+34     	; 0x696 <DIO_write_high_level+0x40>
 674:	83 36       	cpi	r24, 0x63	; 99
 676:	18 f4       	brcc	.+6      	; 0x67e <DIO_write_high_level+0x28>
 678:	81 36       	cpi	r24, 0x61	; 97
 67a:	09 f5       	brne	.+66     	; 0x6be <DIO_write_high_level+0x68>
 67c:	05 c0       	rjmp	.+10     	; 0x688 <DIO_write_high_level+0x32>
 67e:	83 36       	cpi	r24, 0x63	; 99
 680:	89 f0       	breq	.+34     	; 0x6a4 <DIO_write_high_level+0x4e>
 682:	84 36       	cpi	r24, 0x64	; 100
 684:	e1 f4       	brne	.+56     	; 0x6be <DIO_write_high_level+0x68>
 686:	15 c0       	rjmp	.+42     	; 0x6b2 <DIO_write_high_level+0x5c>
	  {
		  case 'a':
		  case'A':
		  PORTA&= 0x0f; // kda ana maked sure in l low level bits equal zero and high level value never changes;
 688:	8b b3       	in	r24, 0x1b	; 27
 68a:	8f 70       	andi	r24, 0x0F	; 15
 68c:	8b bb       	out	0x1b, r24	; 27
		  PORTA|= val;
 68e:	8b b3       	in	r24, 0x1b	; 27
 690:	68 2b       	or	r22, r24
 692:	6b bb       	out	0x1b, r22	; 27
		  break;
 694:	08 95       	ret
		  
		  case 'b':
		  case'B':
		  PORTB&= 0x0f;
 696:	88 b3       	in	r24, 0x18	; 24
 698:	8f 70       	andi	r24, 0x0F	; 15
 69a:	88 bb       	out	0x18, r24	; 24
		  PORTB|= val;
 69c:	88 b3       	in	r24, 0x18	; 24
 69e:	68 2b       	or	r22, r24
 6a0:	68 bb       	out	0x18, r22	; 24
		  break;
 6a2:	08 95       	ret
		  
		  case 'c':
		  case'C':
		  PORTD&= 0x0f;
 6a4:	82 b3       	in	r24, 0x12	; 18
 6a6:	8f 70       	andi	r24, 0x0F	; 15
 6a8:	82 bb       	out	0x12, r24	; 18
		  PORTD|= val;
 6aa:	82 b3       	in	r24, 0x12	; 18
 6ac:	68 2b       	or	r22, r24
 6ae:	62 bb       	out	0x12, r22	; 18
		  break;
 6b0:	08 95       	ret
		  
		  case 'd':
		  case'D':
		  PORTD&= 0x0f;
 6b2:	82 b3       	in	r24, 0x12	; 18
 6b4:	8f 70       	andi	r24, 0x0F	; 15
 6b6:	82 bb       	out	0x12, r24	; 18
		  PORTD|= val;
 6b8:	82 b3       	in	r24, 0x12	; 18
 6ba:	68 2b       	or	r22, r24
 6bc:	62 bb       	out	0x12, r22	; 18
 6be:	08 95       	ret

000006c0 <ENABLE_PULSE>:
	
}

static void ENABLE_PULSE(void)
{
	DIO_vwrite(controlport,EN,1);
 6c0:	82 e4       	ldi	r24, 0x42	; 66
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ca:	8f e9       	ldi	r24, 0x9F	; 159
 6cc:	9f e0       	ldi	r25, 0x0F	; 15
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <ENABLE_PULSE+0xe>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <ENABLE_PULSE+0x14>
 6d4:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite(controlport,EN,0);
 6d6:	82 e4       	ldi	r24, 0x42	; 66
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
}
 6e0:	08 95       	ret

000006e2 <LCD_send_char>:

void LCD_send_char(char data)
{  
 6e2:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	DIO_write_port(portname,data);
 6e4:	81 e4       	ldi	r24, 0x41	; 65
 6e6:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write_port>
	DIO_vwrite(controlport,RS,1);
 6ea:	82 e4       	ldi	r24, 0x42	; 66
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	ENABLE_PULSE();
 6f4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ENABLE_PULSE>
	DIO_write_low_level(portname,data);
	DIO_vwrite(controlport,RS,1);
	ENABLE_PULSE();
	#endif
	
}
 6f8:	08 95       	ret

000006fa <LCD_send_cmd>:


void LCD_send_cmd(char cmd)
{
 6fa:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	DIO_write_port(portname,cmd);
 6fc:	81 e4       	ldi	r24, 0x41	; 65
 6fe:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write_port>
	DIO_vwrite(controlport,RS,0);
 702:	82 e4       	ldi	r24, 0x42	; 66
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	ENABLE_PULSE();
 70c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ENABLE_PULSE>
 710:	8f ec       	ldi	r24, 0xCF	; 207
 712:	97 e0       	ldi	r25, 0x07	; 7
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <LCD_send_cmd+0x1a>
 718:	00 c0       	rjmp	.+0      	; 0x71a <LCD_send_cmd+0x20>
 71a:	00 00       	nop
	DIO_vwrite(controlport,RS,0);
	ENABLE_PULSE();
	#endif
	
	_delay_ms(1); // to leave enough time for executing the cmd before sending another
}
 71c:	08 95       	ret

0000071e <LCD_clear_screen>:

void LCD_clear_screen()
{
	LCD_send_cmd(0x01);
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 724:	8f e1       	ldi	r24, 0x1F	; 31
 726:	9e e4       	ldi	r25, 0x4E	; 78
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_clear_screen+0xa>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <LCD_clear_screen+0x10>
 72e:	00 00       	nop
	_delay_ms(10);
}
 730:	08 95       	ret

00000732 <LCD_initallize>:
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	91 ee       	ldi	r25, 0xE1	; 225
 736:	a4 e0       	ldi	r26, 0x04	; 4
 738:	81 50       	subi	r24, 0x01	; 1
 73a:	90 40       	sbci	r25, 0x00	; 0
 73c:	a0 40       	sbci	r26, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <LCD_initallize+0x6>
 740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_initallize+0x10>
 742:	00 00       	nop
void LCD_initallize()
{
	
	_delay_ms(200);
	#if defined eight_bit_mode
	DIO_vset_PORT_DIR(portname,1);
 744:	81 e4       	ldi	r24, 0x41	; 65
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_vset_PORT_DIR>
	DIO_VsetPINDIR(controlport,RS,1);
 74c:	82 e4       	ldi	r24, 0x42	; 66
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VsetPINDIR>
	DIO_VsetPINDIR(controlport,EN,1);
 756:	82 e4       	ldi	r24, 0x42	; 66
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VsetPINDIR>
	DIO_VsetPINDIR(controlport,WR,1);
 760:	82 e4       	ldi	r24, 0x42	; 66
 762:	62 e0       	ldi	r22, 0x02	; 2
 764:	41 e0       	ldi	r20, 0x01	; 1
 766:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VsetPINDIR>
 76a:	af ec       	ldi	r26, 0xCF	; 207
 76c:	b7 e0       	ldi	r27, 0x07	; 7
 76e:	11 97       	sbiw	r26, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <LCD_initallize+0x3c>
 772:	00 c0       	rjmp	.+0      	; 0x774 <LCD_initallize+0x42>
 774:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(EIGHT_BITS);
 776:	88 e3       	ldi	r24, 0x38	; 56
 778:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 77c:	8f ec       	ldi	r24, 0xCF	; 207
 77e:	97 e0       	ldi	r25, 0x07	; 7
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	f1 f7       	brne	.-4      	; 0x780 <LCD_initallize+0x4e>
 784:	00 c0       	rjmp	.+0      	; 0x786 <LCD_initallize+0x54>
 786:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CURSOR_ON_DISPLAN_ON);
 788:	8e e0       	ldi	r24, 0x0E	; 14
 78a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 78e:	af ec       	ldi	r26, 0xCF	; 207
 790:	b7 e0       	ldi	r27, 0x07	; 7
 792:	11 97       	sbiw	r26, 0x01	; 1
 794:	f1 f7       	brne	.-4      	; 0x792 <LCD_initallize+0x60>
 796:	00 c0       	rjmp	.+0      	; 0x798 <LCD_initallize+0x66>
 798:	00 00       	nop
	_delay_ms(1);
	LCD_clear_screen();
 79a:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_clear_screen>
 79e:	8f e1       	ldi	r24, 0x1F	; 31
 7a0:	9e e4       	ldi	r25, 0x4E	; 78
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_initallize+0x70>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <LCD_initallize+0x76>
 7a8:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 7aa:	86 e0       	ldi	r24, 0x06	; 6
 7ac:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 7b0:	af ec       	ldi	r26, 0xCF	; 207
 7b2:	b7 e0       	ldi	r27, 0x07	; 7
 7b4:	11 97       	sbiw	r26, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCD_initallize+0x82>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <LCD_initallize+0x88>
 7ba:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	#endif
	
}
 7bc:	08 95       	ret

000007be <LCD_move_curser>:
	_delay_ms(10);
}

void LCD_move_curser(char row, char coloumn)
{   
	if(row<1||row>2||coloumn<1||coloumn>16)
 7be:	98 2f       	mov	r25, r24
 7c0:	91 50       	subi	r25, 0x01	; 1
 7c2:	92 30       	cpi	r25, 0x02	; 2
 7c4:	20 f4       	brcc	.+8      	; 0x7ce <LCD_move_curser+0x10>
 7c6:	66 23       	and	r22, r22
 7c8:	11 f0       	breq	.+4      	; 0x7ce <LCD_move_curser+0x10>
 7ca:	61 31       	cpi	r22, 0x11	; 17
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <LCD_move_curser+0x18>
		  LCD_send_cmd(0x80);
 7ce:	80 e8       	ldi	r24, 0x80	; 128
 7d0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 7d4:	08 95       	ret
		  
	else if(row==1)
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	29 f4       	brne	.+10     	; 0x7e4 <LCD_move_curser+0x26>
	      LCD_send_cmd(0x80+coloumn-1);
 7da:	86 2f       	mov	r24, r22
 7dc:	81 58       	subi	r24, 0x81	; 129
 7de:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 7e2:	08 95       	ret
		  
	else if(row==2)
 7e4:	82 30       	cpi	r24, 0x02	; 2
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <LCD_move_curser+0x32>
	      LCD_send_cmd(0xc0+coloumn-1);
 7e8:	86 2f       	mov	r24, r22
 7ea:	81 54       	subi	r24, 0x41	; 65
 7ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_send_cmd>
 7f0:	08 95       	ret

000007f2 <LCD_send_string>:
		
}

void LCD_send_string(char*data)
{
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	ec 01       	movw	r28, r24
	while(*data !=0)
 7f8:	88 81       	ld	r24, Y
 7fa:	88 23       	and	r24, r24
 7fc:	31 f0       	breq	.+12     	; 0x80a <LCD_send_string+0x18>
	else if(row==2)
	      LCD_send_cmd(0xc0+coloumn-1);
		
}

void LCD_send_string(char*data)
 7fe:	21 96       	adiw	r28, 0x01	; 1
{
	while(*data !=0)
	{
		LCD_send_char(*data);
 800:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_send_char>
		
}

void LCD_send_string(char*data)
{
	while(*data !=0)
 804:	89 91       	ld	r24, Y+
 806:	88 23       	and	r24, r24
 808:	d9 f7       	brne	.-10     	; 0x800 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
	}
}
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	08 95       	ret

00000810 <main>:
#include <avr/io.h>
# include "USART.h"
#include "LCD.h"

int main(void)
{   LCD_initallize();
 810:	0e 94 99 03 	call	0x732	; 0x732 <LCD_initallize>
	UART_vInit(9600);
 814:	60 e8       	ldi	r22, 0x80	; 128
 816:	75 e2       	ldi	r23, 0x25	; 37
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 15 04 	call	0x82a	; 0x82a <UART_vInit>
	char x;
    while(1)
    {
        x= UART_u8recieveData();
 820:	0e 94 3c 04 	call	0x878	; 0x878 <UART_u8recieveData>
		LCD_send_char(x);
 824:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_send_char>
 828:	fb cf       	rjmp	.-10     	; 0x820 <main+0x10>

0000082a <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "std_macros.h"

void UART_vInit(unsigned long Baud)
{
 82a:	dc 01       	movw	r26, r24
 82c:	cb 01       	movw	r24, r22
	unsigned short UBRR ;
	UBRR = (F_CPU/(16* Baud))-1;
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	aa 1f       	adc	r26, r26
 83c:	bb 1f       	adc	r27, r27
 83e:	9c 01       	movw	r18, r24
 840:	ad 01       	movw	r20, r26
 842:	22 0f       	add	r18, r18
 844:	33 1f       	adc	r19, r19
 846:	44 1f       	adc	r20, r20
 848:	55 1f       	adc	r21, r21
 84a:	22 0f       	add	r18, r18
 84c:	33 1f       	adc	r19, r19
 84e:	44 1f       	adc	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	72 e1       	ldi	r23, 0x12	; 18
 856:	8a e7       	ldi	r24, 0x7A	; 122
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__udivmodsi4>
 85e:	21 50       	subi	r18, 0x01	; 1
 860:	30 40       	sbci	r19, 0x00	; 0
	UBRRH = (unsigned char)(UBRR>> 8);
 862:	30 bd       	out	0x20, r19	; 32
	UBRRL = ( unsigned char)(UBRR);
 864:	29 b9       	out	0x09, r18	; 9
	SET_BIT( UCSRB,RXEN);
 866:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT( UCSRB,TXEN);
 868:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 86a:	86 e8       	ldi	r24, 0x86	; 134
 86c:	80 bd       	out	0x20, r24	; 32
	 
}
 86e:	08 95       	ret

00000870 <UART_vsendData>:

void UART_vsendData(char data)
{
	while ( READ_BIT(UCSRA, UDRE) ==0 );
 870:	5d 9b       	sbis	0x0b, 5	; 11
 872:	fe cf       	rjmp	.-4      	; 0x870 <UART_vsendData>
	UDR = data;
 874:	8c b9       	out	0x0c, r24	; 12
}
 876:	08 95       	ret

00000878 <UART_u8recieveData>:

char UART_u8recieveData(void)
{
	while( READ_BIT(UCSRA,RXC)==0);
 878:	5f 9b       	sbis	0x0b, 7	; 11
 87a:	fe cf       	rjmp	.-4      	; 0x878 <UART_u8recieveData>
		return UDR;
 87c:	8c b1       	in	r24, 0x0c	; 12
	
}
 87e:	08 95       	ret

00000880 <UART_vsendstring>:

void UART_vsendstring(char *ptr)
{
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	ec 01       	movw	r28, r24
	while (*ptr!=0)
 886:	88 81       	ld	r24, Y
 888:	88 23       	and	r24, r24
 88a:	79 f0       	breq	.+30     	; 0x8aa <UART_vsendstring+0x2a>
	while( READ_BIT(UCSRA,RXC)==0);
		return UDR;
	
}

void UART_vsendstring(char *ptr)
 88c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		UART_vsendData(*ptr);
 88e:	0e 94 38 04 	call	0x870	; 0x870 <UART_vsendData>
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	90 e7       	ldi	r25, 0x70	; 112
 896:	a2 e0       	ldi	r26, 0x02	; 2
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	90 40       	sbci	r25, 0x00	; 0
 89c:	a0 40       	sbci	r26, 0x00	; 0
 89e:	e1 f7       	brne	.-8      	; 0x898 <UART_vsendstring+0x18>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <UART_vsendstring+0x22>
 8a2:	00 00       	nop
	
}

void UART_vsendstring(char *ptr)
{
	while (*ptr!=0)
 8a4:	89 91       	ld	r24, Y+
 8a6:	88 23       	and	r24, r24
 8a8:	91 f7       	brne	.-28     	; 0x88e <UART_vsendstring+0xe>
	{
		UART_vsendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	08 95       	ret

000008b0 <__udivmodsi4>:
 8b0:	a1 e2       	ldi	r26, 0x21	; 33
 8b2:	1a 2e       	mov	r1, r26
 8b4:	aa 1b       	sub	r26, r26
 8b6:	bb 1b       	sub	r27, r27
 8b8:	fd 01       	movw	r30, r26
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <__udivmodsi4_ep>

000008bc <__udivmodsi4_loop>:
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	ee 1f       	adc	r30, r30
 8c2:	ff 1f       	adc	r31, r31
 8c4:	a2 17       	cp	r26, r18
 8c6:	b3 07       	cpc	r27, r19
 8c8:	e4 07       	cpc	r30, r20
 8ca:	f5 07       	cpc	r31, r21
 8cc:	20 f0       	brcs	.+8      	; 0x8d6 <__udivmodsi4_ep>
 8ce:	a2 1b       	sub	r26, r18
 8d0:	b3 0b       	sbc	r27, r19
 8d2:	e4 0b       	sbc	r30, r20
 8d4:	f5 0b       	sbc	r31, r21

000008d6 <__udivmodsi4_ep>:
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	1a 94       	dec	r1
 8e0:	69 f7       	brne	.-38     	; 0x8bc <__udivmodsi4_loop>
 8e2:	60 95       	com	r22
 8e4:	70 95       	com	r23
 8e6:	80 95       	com	r24
 8e8:	90 95       	com	r25
 8ea:	9b 01       	movw	r18, r22
 8ec:	ac 01       	movw	r20, r24
 8ee:	bd 01       	movw	r22, r26
 8f0:	cf 01       	movw	r24, r30
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
