
BCD to seven segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000754  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000754  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076a  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000296  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cd  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000250  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ab  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a8 03 	jmp	0x750	; 0x750 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define  F_CPU 8000000UL
#include <util/delay.h>
#include "SEV-SEG.h"
int main(void)
{
	SEVEN_SEG_initallize('D');
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	0e 94 0f 03 	call	0x61e	; 0x61e <SEVEN_SEG_initallize>
	unsigned char counter=0;
    while(1)
    {
        for(counter=0;counter<=9;counter++)
  98:	c0 e0       	ldi	r28, 0x00	; 0
		{
          BCD_to_sevseg_low('D',counter);
  9a:	84 e4       	ldi	r24, 0x44	; 68
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	6c 2f       	mov	r22, r28
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	0e 94 35 03 	call	0x66a	; 0x66a <BCD_to_sevseg_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	99 e6       	ldi	r25, 0x69	; 105
  aa:	a8 e1       	ldi	r26, 0x18	; 24
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	a0 40       	sbci	r26, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x24>
  b6:	00 00       	nop
{
	SEVEN_SEG_initallize('D');
	unsigned char counter=0;
    while(1)
    {
        for(counter=0;counter<=9;counter++)
  b8:	cf 5f       	subi	r28, 0xFF	; 255
  ba:	ca 30       	cpi	r28, 0x0A	; 10
  bc:	70 f3       	brcs	.-36     	; 0x9a <main+0x8>
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	ec cf       	rjmp	.-40     	; 0x9a <main+0x8>

000000c2 <DIO_VsetPINDIR>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_VsetPINDIR(char portname, char pinnumber, char dir) // (v) before set stands for that this function return VOID 
{
	switch (portname)
  c2:	84 34       	cpi	r24, 0x44	; 68
  c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_VsetPINDIR+0x6>
  c6:	71 c0       	rjmp	.+226    	; 0x1aa <DIO_VsetPINDIR+0xe8>
  c8:	85 34       	cpi	r24, 0x45	; 69
  ca:	48 f4       	brcc	.+18     	; 0xde <DIO_VsetPINDIR+0x1c>
  cc:	82 34       	cpi	r24, 0x42	; 66
  ce:	99 f1       	breq	.+102    	; 0x136 <DIO_VsetPINDIR+0x74>
  d0:	83 34       	cpi	r24, 0x43	; 67
  d2:	08 f0       	brcs	.+2      	; 0xd6 <DIO_VsetPINDIR+0x14>
  d4:	4d c0       	rjmp	.+154    	; 0x170 <DIO_VsetPINDIR+0xae>
  d6:	81 34       	cpi	r24, 0x41	; 65
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_VsetPINDIR+0x1a>
  da:	83 c0       	rjmp	.+262    	; 0x1e2 <DIO_VsetPINDIR+0x120>
  dc:	0f c0       	rjmp	.+30     	; 0xfc <DIO_VsetPINDIR+0x3a>
  de:	82 36       	cpi	r24, 0x62	; 98
  e0:	51 f1       	breq	.+84     	; 0x136 <DIO_VsetPINDIR+0x74>
  e2:	83 36       	cpi	r24, 0x63	; 99
  e4:	20 f4       	brcc	.+8      	; 0xee <DIO_VsetPINDIR+0x2c>
  e6:	81 36       	cpi	r24, 0x61	; 97
  e8:	09 f0       	breq	.+2      	; 0xec <DIO_VsetPINDIR+0x2a>
  ea:	7b c0       	rjmp	.+246    	; 0x1e2 <DIO_VsetPINDIR+0x120>
  ec:	07 c0       	rjmp	.+14     	; 0xfc <DIO_VsetPINDIR+0x3a>
  ee:	83 36       	cpi	r24, 0x63	; 99
  f0:	09 f4       	brne	.+2      	; 0xf4 <DIO_VsetPINDIR+0x32>
  f2:	3e c0       	rjmp	.+124    	; 0x170 <DIO_VsetPINDIR+0xae>
  f4:	84 36       	cpi	r24, 0x64	; 100
  f6:	09 f0       	breq	.+2      	; 0xfa <DIO_VsetPINDIR+0x38>
  f8:	74 c0       	rjmp	.+232    	; 0x1e2 <DIO_VsetPINDIR+0x120>
  fa:	57 c0       	rjmp	.+174    	; 0x1aa <DIO_VsetPINDIR+0xe8>
	{
	case 'A':
	case'a':
	  if (dir==1)
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <DIO_VsetPINDIR+0x58>
	    SET_BIT(DDRA,pinnumber); // from std_macros header file
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_VsetPINDIR+0x4c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_VsetPINDIR+0x48>
 112:	ba 01       	movw	r22, r20
 114:	62 2b       	or	r22, r18
 116:	6a bb       	out	0x1a, r22	; 26
 118:	08 95       	ret
	  else                       //Set the direction of the given pin in port A as output
	    CLR_BIT(DDRA,pinnumber); //Set the direction of the given pin in port A as input
 11a:	2a b3       	in	r18, 0x1a	; 26
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	ac 01       	movw	r20, r24
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_VsetPINDIR+0x66>
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_VsetPINDIR+0x62>
 12c:	ba 01       	movw	r22, r20
 12e:	60 95       	com	r22
 130:	62 23       	and	r22, r18
 132:	6a bb       	out	0x1a, r22	; 26
 134:	08 95       	ret
	break;
	
	
	case 'B':
	case'b':
	   if (dir==1)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	69 f4       	brne	.+26     	; 0x154 <DIO_VsetPINDIR+0x92>
	      SET_BIT(DDRB,pinnumber); 
 13a:	27 b3       	in	r18, 0x17	; 23
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_VsetPINDIR+0x86>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_VsetPINDIR+0x82>
 14c:	ba 01       	movw	r22, r20
 14e:	62 2b       	or	r22, r18
 150:	67 bb       	out	0x17, r22	; 23
 152:	08 95       	ret
	   else
	      CLR_BIT(DDRB,pinnumber);
 154:	27 b3       	in	r18, 0x17	; 23
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_VsetPINDIR+0xa0>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_VsetPINDIR+0x9c>
 166:	ba 01       	movw	r22, r20
 168:	60 95       	com	r22
 16a:	62 23       	and	r22, r18
 16c:	67 bb       	out	0x17, r22	; 23
 16e:	08 95       	ret
	break;
	
	case 'C':
	case'c':
	   if (dir==1)
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	69 f4       	brne	.+26     	; 0x18e <DIO_VsetPINDIR+0xcc>
	      SET_BIT(DDRC,pinnumber);
 174:	24 b3       	in	r18, 0x14	; 20
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_VsetPINDIR+0xc0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_VsetPINDIR+0xbc>
 186:	ba 01       	movw	r22, r20
 188:	62 2b       	or	r22, r18
 18a:	64 bb       	out	0x14, r22	; 20
 18c:	08 95       	ret
	   else
	      CLR_BIT(DDRC,pinnumber);
 18e:	24 b3       	in	r18, 0x14	; 20
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_VsetPINDIR+0xda>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_VsetPINDIR+0xd6>
 1a0:	ba 01       	movw	r22, r20
 1a2:	60 95       	com	r22
 1a4:	62 23       	and	r22, r18
 1a6:	64 bb       	out	0x14, r22	; 20
 1a8:	08 95       	ret
	break;
	
	case 'D':
	case'd':
	  if (dir==1)
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	69 f4       	brne	.+26     	; 0x1c8 <DIO_VsetPINDIR+0x106>
	     SET_BIT(DDRB,pinnumber);
 1ae:	27 b3       	in	r18, 0x17	; 23
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	ac 01       	movw	r20, r24
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_VsetPINDIR+0xfa>
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_VsetPINDIR+0xf6>
 1c0:	ba 01       	movw	r22, r20
 1c2:	62 2b       	or	r22, r18
 1c4:	67 bb       	out	0x17, r22	; 23
 1c6:	08 95       	ret
	  else
	     CLR_BIT(DDRB,pinnumber);
 1c8:	27 b3       	in	r18, 0x17	; 23
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ac 01       	movw	r20, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_VsetPINDIR+0x114>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_VsetPINDIR+0x110>
 1da:	ba 01       	movw	r22, r20
 1dc:	60 95       	com	r22
 1de:	62 23       	and	r22, r18
 1e0:	67 bb       	out	0x17, r22	; 23
 1e2:	08 95       	ret

000001e4 <DIO_vwrite>:
	
}

 void DIO_vwrite (char portname, char pinnumber, char val )
{
	switch (portname)
 1e4:	84 34       	cpi	r24, 0x44	; 68
 1e6:	09 f4       	brne	.+2      	; 0x1ea <DIO_vwrite+0x6>
 1e8:	71 c0       	rjmp	.+226    	; 0x2cc <DIO_vwrite+0xe8>
 1ea:	85 34       	cpi	r24, 0x45	; 69
 1ec:	48 f4       	brcc	.+18     	; 0x200 <DIO_vwrite+0x1c>
 1ee:	82 34       	cpi	r24, 0x42	; 66
 1f0:	99 f1       	breq	.+102    	; 0x258 <DIO_vwrite+0x74>
 1f2:	83 34       	cpi	r24, 0x43	; 67
 1f4:	08 f0       	brcs	.+2      	; 0x1f8 <DIO_vwrite+0x14>
 1f6:	4d c0       	rjmp	.+154    	; 0x292 <DIO_vwrite+0xae>
 1f8:	81 34       	cpi	r24, 0x41	; 65
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_vwrite+0x1a>
 1fc:	83 c0       	rjmp	.+262    	; 0x304 <DIO_vwrite+0x120>
 1fe:	0f c0       	rjmp	.+30     	; 0x21e <DIO_vwrite+0x3a>
 200:	82 36       	cpi	r24, 0x62	; 98
 202:	51 f1       	breq	.+84     	; 0x258 <DIO_vwrite+0x74>
 204:	83 36       	cpi	r24, 0x63	; 99
 206:	20 f4       	brcc	.+8      	; 0x210 <DIO_vwrite+0x2c>
 208:	81 36       	cpi	r24, 0x61	; 97
 20a:	09 f0       	breq	.+2      	; 0x20e <DIO_vwrite+0x2a>
 20c:	7b c0       	rjmp	.+246    	; 0x304 <DIO_vwrite+0x120>
 20e:	07 c0       	rjmp	.+14     	; 0x21e <DIO_vwrite+0x3a>
 210:	83 36       	cpi	r24, 0x63	; 99
 212:	09 f4       	brne	.+2      	; 0x216 <DIO_vwrite+0x32>
 214:	3e c0       	rjmp	.+124    	; 0x292 <DIO_vwrite+0xae>
 216:	84 36       	cpi	r24, 0x64	; 100
 218:	09 f0       	breq	.+2      	; 0x21c <DIO_vwrite+0x38>
 21a:	74 c0       	rjmp	.+232    	; 0x304 <DIO_vwrite+0x120>
 21c:	57 c0       	rjmp	.+174    	; 0x2cc <DIO_vwrite+0xe8>
	{ case 'A':
	  case'a':
	   if (val==1)
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	69 f4       	brne	.+26     	; 0x23c <DIO_vwrite+0x58>
	      SET_BIT(PORTA,pinnumber); // from std_macros header file
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ac 01       	movw	r20, r24
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_vwrite+0x4c>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_vwrite+0x48>
 234:	ba 01       	movw	r22, r20
 236:	62 2b       	or	r22, r18
 238:	6b bb       	out	0x1b, r22	; 27
 23a:	08 95       	ret
	   else                       
	      CLR_BIT(PORTA,pinnumber); 
 23c:	2b b3       	in	r18, 0x1b	; 27
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	ac 01       	movw	r20, r24
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_vwrite+0x66>
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_vwrite+0x62>
 24e:	ba 01       	movw	r22, r20
 250:	60 95       	com	r22
 252:	62 23       	and	r22, r18
 254:	6b bb       	out	0x1b, r22	; 27
 256:	08 95       	ret
	break;
	
	
	case 'B':
	case'b':
	  if (val==1)
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	69 f4       	brne	.+26     	; 0x276 <DIO_vwrite+0x92>
	     SET_BIT(PORTB,pinnumber);
 25c:	28 b3       	in	r18, 0x18	; 24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	ac 01       	movw	r20, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_vwrite+0x86>
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_vwrite+0x82>
 26e:	ba 01       	movw	r22, r20
 270:	62 2b       	or	r22, r18
 272:	68 bb       	out	0x18, r22	; 24
 274:	08 95       	ret
	  else
	     CLR_BIT(PORTB,pinnumber);
 276:	28 b3       	in	r18, 0x18	; 24
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_vwrite+0xa0>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_vwrite+0x9c>
 288:	ba 01       	movw	r22, r20
 28a:	60 95       	com	r22
 28c:	62 23       	and	r22, r18
 28e:	68 bb       	out	0x18, r22	; 24
 290:	08 95       	ret
	break;
	
	case 'C':
	case'c':
	  if (val==1)
 292:	41 30       	cpi	r20, 0x01	; 1
 294:	69 f4       	brne	.+26     	; 0x2b0 <DIO_vwrite+0xcc>
	     SET_BIT(PORTC,pinnumber);
 296:	25 b3       	in	r18, 0x15	; 21
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	ac 01       	movw	r20, r24
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_vwrite+0xc0>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_vwrite+0xbc>
 2a8:	ba 01       	movw	r22, r20
 2aa:	62 2b       	or	r22, r18
 2ac:	65 bb       	out	0x15, r22	; 21
 2ae:	08 95       	ret
	  else
	    CLR_BIT(PORTC,pinnumber);
 2b0:	25 b3       	in	r18, 0x15	; 21
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	ac 01       	movw	r20, r24
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_vwrite+0xda>
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_vwrite+0xd6>
 2c2:	ba 01       	movw	r22, r20
 2c4:	60 95       	com	r22
 2c6:	62 23       	and	r22, r18
 2c8:	65 bb       	out	0x15, r22	; 21
 2ca:	08 95       	ret
	break;
	
	case 'D':
	case'd':
	   if (val==1)
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	69 f4       	brne	.+26     	; 0x2ea <DIO_vwrite+0x106>
	     SET_BIT(PORTD,pinnumber);
 2d0:	22 b3       	in	r18, 0x12	; 18
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	ac 01       	movw	r20, r24
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_vwrite+0xfa>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_vwrite+0xf6>
 2e2:	ba 01       	movw	r22, r20
 2e4:	62 2b       	or	r22, r18
 2e6:	62 bb       	out	0x12, r22	; 18
 2e8:	08 95       	ret
	    else
	      CLR_BIT(PORTD,pinnumber);
 2ea:	22 b3       	in	r18, 0x12	; 18
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ac 01       	movw	r20, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_vwrite+0x114>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_vwrite+0x110>
 2fc:	ba 01       	movw	r22, r20
 2fe:	60 95       	com	r22
 300:	62 23       	and	r22, r18
 302:	62 bb       	out	0x12, r22	; 18
 304:	08 95       	ret

00000306 <DIO_vtoggle>:
	}	
}

void DIO_vtoggle (char portname, char pinnumber)
 {
	 switch (portname)
 306:	84 34       	cpi	r24, 0x44	; 68
 308:	09 f4       	brne	.+2      	; 0x30c <DIO_vtoggle+0x6>
 30a:	3d c0       	rjmp	.+122    	; 0x386 <DIO_vtoggle+0x80>
 30c:	85 34       	cpi	r24, 0x45	; 69
 30e:	40 f4       	brcc	.+16     	; 0x320 <DIO_vtoggle+0x1a>
 310:	82 34       	cpi	r24, 0x42	; 66
 312:	f9 f0       	breq	.+62     	; 0x352 <DIO_vtoggle+0x4c>
 314:	83 34       	cpi	r24, 0x43	; 67
 316:	50 f5       	brcc	.+84     	; 0x36c <DIO_vtoggle+0x66>
 318:	81 34       	cpi	r24, 0x41	; 65
 31a:	09 f0       	breq	.+2      	; 0x31e <DIO_vtoggle+0x18>
 31c:	40 c0       	rjmp	.+128    	; 0x39e <DIO_vtoggle+0x98>
 31e:	0c c0       	rjmp	.+24     	; 0x338 <DIO_vtoggle+0x32>
 320:	82 36       	cpi	r24, 0x62	; 98
 322:	b9 f0       	breq	.+46     	; 0x352 <DIO_vtoggle+0x4c>
 324:	83 36       	cpi	r24, 0x63	; 99
 326:	18 f4       	brcc	.+6      	; 0x32e <DIO_vtoggle+0x28>
 328:	81 36       	cpi	r24, 0x61	; 97
 32a:	c9 f5       	brne	.+114    	; 0x39e <DIO_vtoggle+0x98>
 32c:	05 c0       	rjmp	.+10     	; 0x338 <DIO_vtoggle+0x32>
 32e:	83 36       	cpi	r24, 0x63	; 99
 330:	e9 f0       	breq	.+58     	; 0x36c <DIO_vtoggle+0x66>
 332:	84 36       	cpi	r24, 0x64	; 100
 334:	a1 f5       	brne	.+104    	; 0x39e <DIO_vtoggle+0x98>
 336:	27 c0       	rjmp	.+78     	; 0x386 <DIO_vtoggle+0x80>
	  { case 'a':
	   case'A':
	    TOG_BIT(PORTA, pinnumber);
 338:	2b b3       	in	r18, 0x1b	; 27
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	ac 01       	movw	r20, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_vtoggle+0x40>
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_vtoggle+0x3c>
 34a:	ba 01       	movw	r22, r20
 34c:	62 27       	eor	r22, r18
 34e:	6b bb       	out	0x1b, r22	; 27
		break;
 350:	08 95       	ret
		
	  case 'B':
	  case'b':
	    TOG_BIT(PORTB, pinnumber);
 352:	28 b3       	in	r18, 0x18	; 24
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	ac 01       	movw	r20, r24
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_vtoggle+0x5a>
 35c:	44 0f       	add	r20, r20
 35e:	55 1f       	adc	r21, r21
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_vtoggle+0x56>
 364:	ba 01       	movw	r22, r20
 366:	62 27       	eor	r22, r18
 368:	68 bb       	out	0x18, r22	; 24
	    break;
 36a:	08 95       	ret
	  
	  case'C':
	  case'c':
	    TOG_BIT(PORTC, pinnumber);
 36c:	25 b3       	in	r18, 0x15	; 21
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	ac 01       	movw	r20, r24
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_vtoggle+0x74>
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_vtoggle+0x70>
 37e:	ba 01       	movw	r22, r20
 380:	62 27       	eor	r22, r18
 382:	65 bb       	out	0x15, r22	; 21
	    break;
 384:	08 95       	ret
		
		
	  case'D':
	  case'd':
	     TOG_BIT(PORTD, pinnumber);
 386:	22 b3       	in	r18, 0x12	; 18
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_vtoggle+0x8e>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_vtoggle+0x8a>
 398:	ba 01       	movw	r22, r20
 39a:	62 27       	eor	r22, r18
 39c:	62 bb       	out	0x12, r22	; 18
 39e:	08 95       	ret

000003a0 <DIO_u8read>:
 }
 
 unsigned char DIO_u8read(char portname, char pinnumber)
 { unsigned char return_value=0;
	 
	 switch (portname)
 3a0:	84 34       	cpi	r24, 0x44	; 68
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <DIO_u8read+0x6>
 3a4:	4e c0       	rjmp	.+156    	; 0x442 <DIO_u8read+0xa2>
 3a6:	85 34       	cpi	r24, 0x45	; 69
 3a8:	40 f4       	brcc	.+16     	; 0x3ba <DIO_u8read+0x1a>
 3aa:	82 34       	cpi	r24, 0x42	; 66
 3ac:	31 f1       	breq	.+76     	; 0x3fa <DIO_u8read+0x5a>
 3ae:	83 34       	cpi	r24, 0x43	; 67
 3b0:	b0 f5       	brcc	.+108    	; 0x41e <DIO_u8read+0x7e>
 3b2:	81 34       	cpi	r24, 0x41	; 65
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_u8read+0x18>
 3b6:	57 c0       	rjmp	.+174    	; 0x466 <DIO_u8read+0xc6>
 3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <DIO_u8read+0x36>
 3ba:	82 36       	cpi	r24, 0x62	; 98
 3bc:	f1 f0       	breq	.+60     	; 0x3fa <DIO_u8read+0x5a>
 3be:	83 36       	cpi	r24, 0x63	; 99
 3c0:	20 f4       	brcc	.+8      	; 0x3ca <DIO_u8read+0x2a>
 3c2:	81 36       	cpi	r24, 0x61	; 97
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_u8read+0x28>
 3c6:	4f c0       	rjmp	.+158    	; 0x466 <DIO_u8read+0xc6>
 3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <DIO_u8read+0x36>
 3ca:	83 36       	cpi	r24, 0x63	; 99
 3cc:	41 f1       	breq	.+80     	; 0x41e <DIO_u8read+0x7e>
 3ce:	84 36       	cpi	r24, 0x64	; 100
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <DIO_u8read+0x34>
 3d2:	49 c0       	rjmp	.+146    	; 0x466 <DIO_u8read+0xc6>
 3d4:	36 c0       	rjmp	.+108    	; 0x442 <DIO_u8read+0xa2>
	 {  
		 
		 case 'A':
		 case'a':
		  
		  return_value  = READ_BIT(PINA, pinnumber);
 3d6:	29 b3       	in	r18, 0x19	; 25
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	06 2e       	mov	r0, r22
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_u8read+0x44>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_u8read+0x40>
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	82 23       	and	r24, r18
 3ec:	93 23       	and	r25, r19
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8read+0x54>
 3f0:	95 95       	asr	r25
 3f2:	87 95       	ror	r24
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8read+0x50>
		  break;
 3f8:	08 95       	ret
		
		 case 'B':
		 case'b':
		 
		    return_value = READ_BIT(PINB, pinnumber);
 3fa:	26 b3       	in	r18, 0x16	; 22
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	06 2e       	mov	r0, r22
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_u8read+0x68>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_u8read+0x64>
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	82 23       	and	r24, r18
 410:	93 23       	and	r25, r19
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_u8read+0x78>
 414:	95 95       	asr	r25
 416:	87 95       	ror	r24
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_u8read+0x74>
			break;
 41c:	08 95       	ret
			
		 case 'C':
		 case'c':
		    return_value= READ_BIT(PINC, pinnumber);
 41e:	23 b3       	in	r18, 0x13	; 19
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	06 2e       	mov	r0, r22
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_u8read+0x8c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_u8read+0x88>
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	82 23       	and	r24, r18
 434:	93 23       	and	r25, r19
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_u8read+0x9c>
 438:	95 95       	asr	r25
 43a:	87 95       	ror	r24
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_u8read+0x98>
			break;
 440:	08 95       	ret
			
		 case 'D':
		 case'd':
		    return_value= READ_BIT(PIND, pinnumber);
 442:	20 b3       	in	r18, 0x10	; 16
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	06 2e       	mov	r0, r22
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_u8read+0xb0>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_u8read+0xac>
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	82 23       	and	r24, r18
 458:	93 23       	and	r25, r19
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_u8read+0xc0>
 45c:	95 95       	asr	r25
 45e:	87 95       	ror	r24
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_u8read+0xbc>
			break;
 464:	08 95       	ret
	  
		
 }
 
 unsigned char DIO_u8read(char portname, char pinnumber)
 { unsigned char return_value=0;
 466:	80 e0       	ldi	r24, 0x00	; 0
		 
		 
		 
	 }
	 return return_value;
 }
 468:	08 95       	ret

0000046a <DIO_vset_PORT_DIR>:
 
 
 void DIO_vset_PORT_DIR(char portname,char dir)
 {    switch (portname)
 46a:	84 34       	cpi	r24, 0x44	; 68
 46c:	d9 f0       	breq	.+54     	; 0x4a4 <DIO_vset_PORT_DIR+0x3a>
 46e:	85 34       	cpi	r24, 0x45	; 69
 470:	38 f4       	brcc	.+14     	; 0x480 <DIO_vset_PORT_DIR+0x16>
 472:	82 34       	cpi	r24, 0x42	; 66
 474:	99 f0       	breq	.+38     	; 0x49c <DIO_vset_PORT_DIR+0x32>
 476:	83 34       	cpi	r24, 0x43	; 67
 478:	98 f4       	brcc	.+38     	; 0x4a0 <DIO_vset_PORT_DIR+0x36>
 47a:	81 34       	cpi	r24, 0x41	; 65
 47c:	a1 f4       	brne	.+40     	; 0x4a6 <DIO_vset_PORT_DIR+0x3c>
 47e:	0c c0       	rjmp	.+24     	; 0x498 <DIO_vset_PORT_DIR+0x2e>
 480:	82 36       	cpi	r24, 0x62	; 98
 482:	61 f0       	breq	.+24     	; 0x49c <DIO_vset_PORT_DIR+0x32>
 484:	83 36       	cpi	r24, 0x63	; 99
 486:	18 f4       	brcc	.+6      	; 0x48e <DIO_vset_PORT_DIR+0x24>
 488:	81 36       	cpi	r24, 0x61	; 97
 48a:	69 f4       	brne	.+26     	; 0x4a6 <DIO_vset_PORT_DIR+0x3c>
 48c:	05 c0       	rjmp	.+10     	; 0x498 <DIO_vset_PORT_DIR+0x2e>
 48e:	83 36       	cpi	r24, 0x63	; 99
 490:	39 f0       	breq	.+14     	; 0x4a0 <DIO_vset_PORT_DIR+0x36>
 492:	84 36       	cpi	r24, 0x64	; 100
 494:	41 f4       	brne	.+16     	; 0x4a6 <DIO_vset_PORT_DIR+0x3c>
 496:	06 c0       	rjmp	.+12     	; 0x4a4 <DIO_vset_PORT_DIR+0x3a>
     {    case 'a':
	      case'A':
	           DDRA= dir;
 498:	6a bb       	out	0x1a, r22	; 26
	       break;
 49a:	08 95       	ret
	 
	       case 'B':
	       case'b':
	            DDRB= dir;
 49c:	67 bb       	out	0x17, r22	; 23
	       break;
 49e:	08 95       	ret
	 
	       case'C':
	       case'c':
	            DDRC= dir;
 4a0:	64 bb       	out	0x14, r22	; 20
	       break;
 4a2:	08 95       	ret
	 
	 
	       case'D':
	       case'd':
	            DDRD= dir;
 4a4:	61 bb       	out	0x11, r22	; 17
 4a6:	08 95       	ret

000004a8 <DIO_write_port>:
	       break;
	 }		   
 }
 void DIO_write_port(unsigned char portname,unsigned char portvalue)
 {
	 switch(portname)
 4a8:	82 34       	cpi	r24, 0x42	; 66
 4aa:	61 f0       	breq	.+24     	; 0x4c4 <DIO_write_port+0x1c>
 4ac:	83 34       	cpi	r24, 0x43	; 67
 4ae:	18 f4       	brcc	.+6      	; 0x4b6 <DIO_write_port+0xe>
 4b0:	81 34       	cpi	r24, 0x41	; 65
 4b2:	69 f4       	brne	.+26     	; 0x4ce <DIO_write_port+0x26>
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <DIO_write_port+0x18>
 4b6:	83 34       	cpi	r24, 0x43	; 67
 4b8:	39 f0       	breq	.+14     	; 0x4c8 <DIO_write_port+0x20>
 4ba:	84 34       	cpi	r24, 0x44	; 68
 4bc:	41 f4       	brne	.+16     	; 0x4ce <DIO_write_port+0x26>
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <DIO_write_port+0x24>
	 {
		 case 'A' :
		 PORTA=portvalue; //Write the given value to the port A
 4c0:	6b bb       	out	0x1b, r22	; 27
		 break ;
 4c2:	08 95       	ret
		 case 'B':
		 PORTB=portvalue; //Write the given value to the port B
 4c4:	68 bb       	out	0x18, r22	; 24
		 break ;
 4c6:	08 95       	ret
		 case 'C' :
		 PORTC=portvalue; //Write the given value to the port C
 4c8:	65 bb       	out	0x15, r22	; 21
		 break ;
 4ca:	08 95       	ret
		 case 'D':
		 PORTD=portvalue; //Write the given value to the port D
 4cc:	62 bb       	out	0x12, r22	; 18
 4ce:	08 95       	ret

000004d0 <DIO_read_port>:
 }

 unsigned char DIO_read_port(unsigned char portname)
 {
	 unsigned char return_val=0;
	 switch(portname)
 4d0:	82 34       	cpi	r24, 0x42	; 66
 4d2:	61 f0       	breq	.+24     	; 0x4ec <DIO_read_port+0x1c>
 4d4:	83 34       	cpi	r24, 0x43	; 67
 4d6:	18 f4       	brcc	.+6      	; 0x4de <DIO_read_port+0xe>
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	71 f4       	brne	.+28     	; 0x4f8 <DIO_read_port+0x28>
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <DIO_read_port+0x18>
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <DIO_read_port+0x20>
 4e2:	84 34       	cpi	r24, 0x44	; 68
 4e4:	49 f4       	brne	.+18     	; 0x4f8 <DIO_read_port+0x28>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <DIO_read_port+0x24>
	 {
		 case 'A' :
		 return_val=PINA; // read the value of port A
 4e8:	89 b3       	in	r24, 0x19	; 25
		 break ;
 4ea:	08 95       	ret
		 case 'B':
		 return_val=PINB; // read the value of port B
 4ec:	86 b3       	in	r24, 0x16	; 22
		 break ;
 4ee:	08 95       	ret
		 case 'C' :
		 return_val=PINC; // read the value of port C
 4f0:	83 b3       	in	r24, 0x13	; 19
		 break ;
 4f2:	08 95       	ret
		 case 'D':
		 return_val=PIND; // read the value of port D
 4f4:	80 b3       	in	r24, 0x10	; 16
		 break ;
 4f6:	08 95       	ret
	 }
 }

 unsigned char DIO_read_port(unsigned char portname)
 {
	 unsigned char return_val=0;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
		 break ;
		 default:
		 break ;
	 }
	 return return_val;
 }
 4fa:	08 95       	ret

000004fc <DIO_enablepullup>:
	   }
	   
   }*/
 
 void DIO_enablepullup(char portname, char pinnumber, char enable)
 {   switch(portname)
 4fc:	84 34       	cpi	r24, 0x44	; 68
 4fe:	09 f4       	brne	.+2      	; 0x502 <DIO_enablepullup+0x6>
 500:	71 c0       	rjmp	.+226    	; 0x5e4 <DIO_enablepullup+0xe8>
 502:	85 34       	cpi	r24, 0x45	; 69
 504:	48 f4       	brcc	.+18     	; 0x518 <DIO_enablepullup+0x1c>
 506:	82 34       	cpi	r24, 0x42	; 66
 508:	99 f1       	breq	.+102    	; 0x570 <DIO_enablepullup+0x74>
 50a:	83 34       	cpi	r24, 0x43	; 67
 50c:	08 f0       	brcs	.+2      	; 0x510 <DIO_enablepullup+0x14>
 50e:	4d c0       	rjmp	.+154    	; 0x5aa <DIO_enablepullup+0xae>
 510:	81 34       	cpi	r24, 0x41	; 65
 512:	09 f0       	breq	.+2      	; 0x516 <DIO_enablepullup+0x1a>
 514:	83 c0       	rjmp	.+262    	; 0x61c <DIO_enablepullup+0x120>
 516:	0f c0       	rjmp	.+30     	; 0x536 <DIO_enablepullup+0x3a>
 518:	82 36       	cpi	r24, 0x62	; 98
 51a:	51 f1       	breq	.+84     	; 0x570 <DIO_enablepullup+0x74>
 51c:	83 36       	cpi	r24, 0x63	; 99
 51e:	20 f4       	brcc	.+8      	; 0x528 <DIO_enablepullup+0x2c>
 520:	81 36       	cpi	r24, 0x61	; 97
 522:	09 f0       	breq	.+2      	; 0x526 <DIO_enablepullup+0x2a>
 524:	7b c0       	rjmp	.+246    	; 0x61c <DIO_enablepullup+0x120>
 526:	07 c0       	rjmp	.+14     	; 0x536 <DIO_enablepullup+0x3a>
 528:	83 36       	cpi	r24, 0x63	; 99
 52a:	09 f4       	brne	.+2      	; 0x52e <DIO_enablepullup+0x32>
 52c:	3e c0       	rjmp	.+124    	; 0x5aa <DIO_enablepullup+0xae>
 52e:	84 36       	cpi	r24, 0x64	; 100
 530:	09 f0       	breq	.+2      	; 0x534 <DIO_enablepullup+0x38>
 532:	74 c0       	rjmp	.+232    	; 0x61c <DIO_enablepullup+0x120>
 534:	57 c0       	rjmp	.+174    	; 0x5e4 <DIO_enablepullup+0xe8>
	 {
		 case'A':
		 case'a':
		    if (enable==1)
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	69 f4       	brne	.+26     	; 0x554 <DIO_enablepullup+0x58>
			  SET_BIT(PORTA,pinnumber);
 53a:	4b b3       	in	r20, 0x1b	; 27
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	c9 01       	movw	r24, r18
 542:	06 2e       	mov	r0, r22
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_enablepullup+0x4e>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_enablepullup+0x4a>
 54e:	84 2b       	or	r24, r20
 550:	8b bb       	out	0x1b, r24	; 27
 552:	10 c0       	rjmp	.+32     	; 0x574 <DIO_enablepullup+0x78>
			else
			CLR_BIT(PORTA,pinnumber);
 554:	4b b3       	in	r20, 0x1b	; 27
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	c9 01       	movw	r24, r18
 55c:	06 2e       	mov	r0, r22
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_enablepullup+0x68>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_enablepullup+0x64>
 568:	80 95       	com	r24
 56a:	84 23       	and	r24, r20
 56c:	8b bb       	out	0x1b, r24	; 27
 56e:	0f c0       	rjmp	.+30     	; 0x58e <DIO_enablepullup+0x92>
			
		 case'B':
		 case'b':
		 
		     if (enable==1)
 570:	41 30       	cpi	r20, 0x01	; 1
 572:	69 f4       	brne	.+26     	; 0x58e <DIO_enablepullup+0x92>
		     SET_BIT(PORTB,pinnumber);
 574:	28 b3       	in	r18, 0x18	; 24
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	ac 01       	movw	r20, r24
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_enablepullup+0x86>
 57e:	44 0f       	add	r20, r20
 580:	55 1f       	adc	r21, r21
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_enablepullup+0x82>
 586:	ba 01       	movw	r22, r20
 588:	62 2b       	or	r22, r18
 58a:	68 bb       	out	0x18, r22	; 24
 58c:	08 95       	ret
		     else
		     CLR_BIT(PORTB,pinnumber);
 58e:	28 b3       	in	r18, 0x18	; 24
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	ac 01       	movw	r20, r24
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_enablepullup+0xa0>
 598:	44 0f       	add	r20, r20
 59a:	55 1f       	adc	r21, r21
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_enablepullup+0x9c>
 5a0:	ba 01       	movw	r22, r20
 5a2:	60 95       	com	r22
 5a4:	62 23       	and	r22, r18
 5a6:	68 bb       	out	0x18, r22	; 24
 5a8:	08 95       	ret
			 break;
		 case'C':
		 case'c':
		     if (enable==1)
 5aa:	41 30       	cpi	r20, 0x01	; 1
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <DIO_enablepullup+0xcc>
		     SET_BIT(PORTC,pinnumber);
 5ae:	25 b3       	in	r18, 0x15	; 21
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	ac 01       	movw	r20, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_enablepullup+0xc0>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_enablepullup+0xbc>
 5c0:	ba 01       	movw	r22, r20
 5c2:	62 2b       	or	r22, r18
 5c4:	65 bb       	out	0x15, r22	; 21
 5c6:	08 95       	ret
		     else
		     CLR_BIT(PORTC,pinnumber);
 5c8:	25 b3       	in	r18, 0x15	; 21
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_enablepullup+0xda>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_enablepullup+0xd6>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	65 bb       	out	0x15, r22	; 21
 5e2:	08 95       	ret
			 break;
		 case'D':
		 case'd':
		   if (enable==1)
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	69 f4       	brne	.+26     	; 0x602 <DIO_enablepullup+0x106>
		   SET_BIT(PORTD,pinnumber);
 5e8:	22 b3       	in	r18, 0x12	; 18
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_enablepullup+0xfa>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_enablepullup+0xf6>
 5fa:	ba 01       	movw	r22, r20
 5fc:	62 2b       	or	r22, r18
 5fe:	62 bb       	out	0x12, r22	; 18
 600:	08 95       	ret
		   else
		   CLR_BIT(PORTD,pinnumber);
 602:	22 b3       	in	r18, 0x12	; 18
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	ac 01       	movw	r20, r24
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_enablepullup+0x114>
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_enablepullup+0x110>
 614:	ba 01       	movw	r22, r20
 616:	60 95       	com	r22
 618:	62 23       	and	r22, r18
 61a:	62 bb       	out	0x12, r22	; 18
 61c:	08 95       	ret

0000061e <SEVEN_SEG_initallize>:
#include "DIO.h"
#include "std_macros.h"

void SEVEN_SEG_initallize(char portname)
{
	DIO_vset_PORT_DIR(portname, 0xFF);
 61e:	6f ef       	ldi	r22, 0xFF	; 255
 620:	0e 94 35 02 	call	0x46a	; 0x46a <DIO_vset_PORT_DIR>
}
 624:	08 95       	ret

00000626 <SEVEN_SEG_write>:
void SEVEN_SEG_write(char portname,char index)
{  
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	2a 97       	sbiw	r28, 0x0a	; 10
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
	 #ifdef CC
	unsigned  char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
 63a:	de 01       	movw	r26, r28
 63c:	11 96       	adiw	r26, 0x01	; 1
 63e:	e0 e6       	ldi	r30, 0x60	; 96
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	9a e0       	ldi	r25, 0x0A	; 10
 644:	01 90       	ld	r0, Z+
 646:	0d 92       	st	X+, r0
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	e1 f7       	brne	.-8      	; 0x644 <SEVEN_SEG_write+0x1e>
   #else 
    unsigned  char arr[]={~0x3f,~0x06,~0x5b,~0x4f,~0x66,~0x6d,~0x7d,~0x47,~0x7f,~0x6f};
   #endif
	DIO_write_port(portname,arr[index]);
 64c:	fe 01       	movw	r30, r28
 64e:	e6 0f       	add	r30, r22
 650:	f1 1d       	adc	r31, r1
 652:	61 81       	ldd	r22, Z+1	; 0x01
 654:	0e 94 54 02 	call	0x4a8	; 0x4a8 <DIO_write_port>
}
 658:	2a 96       	adiw	r28, 0x0a	; 10
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <BCD_to_sevseg_low>:

void BCD_to_sevseg_low(char portname,char val)
{
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	c8 2f       	mov	r28, r24
 672:	06 2f       	mov	r16, r22
	DIO_vwrite(portname,0,READ_BIT(val,0));
 674:	46 2f       	mov	r20, r22
 676:	41 70       	andi	r20, 0x01	; 1
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
	DIO_vwrite(portname,1,READ_BIT(val,1));
 67e:	10 e0       	ldi	r17, 0x00	; 0
 680:	a8 01       	movw	r20, r16
 682:	42 70       	andi	r20, 0x02	; 2
 684:	50 70       	andi	r21, 0x00	; 0
 686:	55 95       	asr	r21
 688:	47 95       	ror	r20
 68a:	8c 2f       	mov	r24, r28
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
	DIO_vwrite(portname,2,READ_BIT(val,2));
 692:	a8 01       	movw	r20, r16
 694:	44 70       	andi	r20, 0x04	; 4
 696:	50 70       	andi	r21, 0x00	; 0
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	55 95       	asr	r21
 69e:	47 95       	ror	r20
 6a0:	8c 2f       	mov	r24, r28
 6a2:	62 e0       	ldi	r22, 0x02	; 2
 6a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
	DIO_vwrite(portname,3,READ_BIT(val,3));
 6a8:	08 70       	andi	r16, 0x08	; 8
 6aa:	10 70       	andi	r17, 0x00	; 0
 6ac:	a8 01       	movw	r20, r16
 6ae:	55 95       	asr	r21
 6b0:	47 95       	ror	r20
 6b2:	55 95       	asr	r21
 6b4:	47 95       	ror	r20
 6b6:	55 95       	asr	r21
 6b8:	47 95       	ror	r20
 6ba:	8c 2f       	mov	r24, r28
 6bc:	63 e0       	ldi	r22, 0x03	; 3
 6be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
}
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <BCD_to_sevseg_high>:

void BCD_to_sevseg_high(char portname,char val)
{
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	c8 2f       	mov	r28, r24
 6d4:	d6 2f       	mov	r29, r22
	DIO_vwrite(portname,4,READ_BIT(val,4));
 6d6:	06 2f       	mov	r16, r22
 6d8:	10 e0       	ldi	r17, 0x00	; 0
 6da:	a8 01       	movw	r20, r16
 6dc:	40 71       	andi	r20, 0x10	; 16
 6de:	50 70       	andi	r21, 0x00	; 0
 6e0:	55 95       	asr	r21
 6e2:	47 95       	ror	r20
 6e4:	55 95       	asr	r21
 6e6:	47 95       	ror	r20
 6e8:	55 95       	asr	r21
 6ea:	47 95       	ror	r20
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	64 e0       	ldi	r22, 0x04	; 4
 6f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
	DIO_vwrite(portname,5,READ_BIT(val,5));
 6f6:	a8 01       	movw	r20, r16
 6f8:	40 72       	andi	r20, 0x20	; 32
 6fa:	50 70       	andi	r21, 0x00	; 0
 6fc:	55 95       	asr	r21
 6fe:	47 95       	ror	r20
 700:	55 95       	asr	r21
 702:	47 95       	ror	r20
 704:	55 95       	asr	r21
 706:	47 95       	ror	r20
 708:	55 95       	asr	r21
 70a:	47 95       	ror	r20
 70c:	55 95       	asr	r21
 70e:	47 95       	ror	r20
 710:	8c 2f       	mov	r24, r28
 712:	65 e0       	ldi	r22, 0x05	; 5
 714:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
	DIO_vwrite(portname,6,READ_BIT(val,6));
 718:	00 74       	andi	r16, 0x40	; 64
 71a:	10 70       	andi	r17, 0x00	; 0
 71c:	a8 01       	movw	r20, r16
 71e:	04 2e       	mov	r0, r20
 720:	45 2f       	mov	r20, r21
 722:	00 0c       	add	r0, r0
 724:	44 1f       	adc	r20, r20
 726:	55 0b       	sbc	r21, r21
 728:	00 0c       	add	r0, r0
 72a:	44 1f       	adc	r20, r20
 72c:	55 1f       	adc	r21, r21
 72e:	8c 2f       	mov	r24, r28
 730:	66 e0       	ldi	r22, 0x06	; 6
 732:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
	DIO_vwrite(portname,7,READ_BIT(val,7));
 736:	4d 2f       	mov	r20, r29
 738:	44 1f       	adc	r20, r20
 73a:	44 27       	eor	r20, r20
 73c:	44 1f       	adc	r20, r20
 73e:	8c 2f       	mov	r24, r28
 740:	67 e0       	ldi	r22, 0x07	; 7
 742:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_vwrite>
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	08 95       	ret

00000750 <_exit>:
 750:	f8 94       	cli

00000752 <__stop_program>:
 752:	ff cf       	rjmp	.-2      	; 0x752 <__stop_program>
